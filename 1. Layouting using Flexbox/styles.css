.container {
    max-width: 1200px;
    margin: auto auto;
}

.box {
    width: 50px;
    height: 50px;
    margin: 5px;
    background-color: #f2f2f2;
    border: 1px solid #ccc;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
}

.box.tall {
    height: 100px;
}

.box.wide {
    width: 100px;
}


.red{
    background-color: red;
}

.blue{
    background-color: blue;
}

.green{
    background-color: green;
}


/* TODO 1 */
.todo-1-container {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 10px;
   
    

    /* TODO 1.1.1 Set the display of this div to flex*/
    /* TODO 1.1.2 Set the flex direction to row. Then set it to column. What's the difference?*/
    /* Answer: The display of the elements of the div are presented horizontally when set to row 
    and vertically when set to column */
    /* TODO 1.1.3 Set the flex direction to row. Then enable flex wrap. What does wrap do? */
    /* Answer: There are no visible changes, however, flex-wrap allows fitting or wrapping lines to 
    avoid overflow of the container. There are no changes because the container is not full*/
    /* Todo 1.1.4 Set the gap of the container to 10px. Now change it to 20px. What does gap do? */
    /* Answer: The gap modifies the gaps between the flex items. */

}

/* TODO 2 */
.todo-2-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    /* TODO 1.2.1 Set the display to flex and flex direction to row */
    /* TODO 1.2.2 Justify the content to start, then end, then center. Make sure to see how the position of the divs change*/
    /* TODO 1.2.3 Align the items start, then end, then center. Make sure to see how the position of the divs change*/
    /* TODO 1.2.4 Set the flex direction to column and play around with justify-content and align-items */
}

/* TODO 3 */
.todo-3-container{
    display: flex;
    align-items: start;
    /* Todo 1.3.1 Set the display to flex and align items center */
}

/* Select the red box */
.todo-3-container .red {
    
}

/* Select the green box */
.todo-3-container .green {
    flex-grow: 1 ;
    /* Todo 1.3.3 Set flex grow to 1 */
}

/* Select the blue box */
.todo-3-container .blue{
    flex-grow: 2;

    /* Todo 1.3.4 Set flex grow to 2. Try out the other values. What happens? */
    /* Answer: The item with flex grow set to two grew twice bigger than the others set in 1.  */
}

/* TODO 4 */
.todo-4-container{
    display: flex;
    /* Set the display to flex */
}

/* Select the red box */
.todo-4-container .red {
    margin-left: auto;
    /* Set margin left to auto.  */
}

/* Select the green box */
.todo-4-container .green {
 
    margin-right: auto;
    /* Set margin right to auto */
}

/* Select the blue box */
.todo-4-container .blue {
   order: 1;
   
    /* Set the order to  1. Try chaging the order of the other divs. What does order do?*/
    /* Answer: The order property in html is supposed to change the appearance of the items 
    visually without changing html properties, it does the same in this case,however, it does not
    look like it initially as gree and red boxes have "margin left" and "margin-right" enabled.  */
}
